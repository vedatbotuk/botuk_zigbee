name: Release - ESP32-H2 Project

on:
  push:
    branches:
      - main

jobs:
  build-release-main:
    runs-on: ubuntu-latest

    env:
      IDF_TOOLS_PATH: ${{ github.workspace }}/tools

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          echo "Setting up environment..."
          chmod +x ./scripts/setup_env.sh
          ./scripts/setup_env.sh

      - name: Make prod script executable
        run: chmod +x ./scripts/prod.sh

      - name: Run the production script
        run: ./scripts/prod.sh

      - name: List Files in ota Directory
        run: ls -al ota

      # Step 6: Set up a unique version tag based on date and time
      - name: Set up version tag
        id: version_tag
        run: |
          DATE_TAG=$(date +'%Y.%m.%d-%H%M%S') # Adds hours, minutes, and seconds to the tag
          TAG="v${DATE_TAG}"
          echo "New tag: $TAG"
          echo "::set-output name=TAG::$TAG"

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version_tag.outputs.TAG }}
          git push origin ${{ steps.version_tag.outputs.TAG }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_tag.outputs.TAG }}
          release_name: "Release ${{ steps.version_tag.outputs.TAG }}"
          body: "Automated release for changes merged into main. Release Tag: ${{ steps.version_tag.outputs.TAG }}"
          draft: false
          prerelease: false

      # Step 9: Upload .ota binaries with original names to the release
      - name: Upload .ota Binaries to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in ota/*.ota; do
            [ -e "$file" ] || continue # Skip if no .ota files found
            filename=$(basename "$file") # Extract the file name
            echo "Uploading $filename..."
            
            # Upload the file by appending the name directly to the URL
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$filename"
          done

