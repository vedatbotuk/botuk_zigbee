name: PROD - ESP32-H2 Project

on:
  push:
    branches:
      - main

jobs:
  build-release-main:
    runs-on: ubuntu-latest

    env:
      IDF_TOOLS_PATH: ${{ github.workspace }}/tools

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up environment
      - name: Set up environment
        run: |
          echo "Setting up environment..."
          # Execute the setup script
          chmod +x ./scripts/setup_env.sh # Make sure the script is executable
          ./scripts/setup_env.sh # Run the script

      # Step 3: Make prod script executable and run it
      - name: Make prod script executable
        run: chmod +x ./scripts/prod.sh # Ensure the script is executable

      - name: Run the production script
        run: ./scripts/prod.sh  # Execute script

      # Step 4: Read FIRMWARE_VERSION and VERSION from settings.conf
      - name: Read version information
        id: version_info
        run: |
          FIRMWARE_VERSION=$(grep '^FIRMWARE_VERSION=' settings.conf | cut -d '=' -f2)
          VERSION=$(grep '^VERSION=' settings.conf | cut -d '=' -f2)
          echo "Firmware version: $FIRMWARE_VERSION"
          echo "Version code: $VERSION"
          echo "::set-output name=firmware_version::$FIRMWARE_VERSION"
          echo "::set-output name=version::$VERSION"

      # Step 5: Determine the new version tag
      - name: Set up version tag
        id: version_tag
        run: |
          DATE_TAG=$(date +'%Y.%m.%d')
          TAG="v${DATE_TAG}"
          echo "New tag: $TAG"
          echo "::set-output name=TAG::$TAG"

      # Step 6: Create and push tag
      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version_tag.outputs.TAG }}
          git push origin ${{ steps.version_tag.outputs.TAG }}

      # Step 7: Create a GitHub release with FIRMWARE_VERSION and VERSION
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_tag.outputs.TAG }}
          release_name: "Release ${{ steps.version_info.outputs.firmware_version }} - Version ${{ steps.version_info.outputs.version }}"
          body: "Automated release for changes merged into main. Firmware Version: ${{ steps.version_info.outputs.firmware_version }}, Version Code: ${{ steps.version_info.outputs.version }}"
          draft: false
          prerelease: false

      # Step 8: Upload .ota binaries to the release
      - name: Upload .ota Binaries to Release
        uses: actions/upload-release-asset@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "ota/*.ota"  # Upload all .ota files in the ota directory
          asset_name: "firmware_${{ steps.version_info.outputs.firmware_version }}.ota"
          asset_content_type: application/octet-stream
