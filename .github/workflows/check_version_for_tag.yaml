name: Check Firmware Version and Prod Devices Change

on:
  pull_request:
    branches:
      - main

jobs:
  check-version-and-devices-change:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history is fetched for comparison

      - name: Get FIRMWARE_VERSION and VERSION from main
        id: main_values
        run: |
          # Fetch main branch for comparison
          git fetch origin main:main
          # Extract values from main branch
          MAIN_FIRMWARE_VERSION=$(git show main:settings.conf | grep "^FIRMWARE_VERSION=" | cut -d '=' -f 2)
          MAIN_VERSION=$(git show main:settings.conf | grep "^VERSION=" | cut -d '=' -f 2)
          echo "main_firmware_version=$MAIN_FIRMWARE_VERSION" >> $GITHUB_ENV
          echo "main_version=$MAIN_VERSION" >> $GITHUB_ENV

      - name: Get FIRMWARE_VERSION and VERSION from develop
        id: develop_values
        run: |
          # Extract values from develop branch (current branch)
          DEVELOP_FIRMWARE_VERSION=$(grep "^FIRMWARE_VERSION=" settings.conf | cut -d '=' -f 2)
          DEVELOP_VERSION=$(grep "^VERSION=" settings.conf | cut -d '=' -f 2)
          echo "develop_firmware_version=$DEVELOP_FIRMWARE_VERSION" >> $GITHUB_ENV
          echo "develop_version=$DEVELOP_VERSION" >> $GITHUB_ENV

      - name: Check for prod_devices.csv changes
        id: check_devices_file
        run: |
          # Check if prod_devices.csv has changed in the current PR
          if git diff --name-only origin/main | grep -q "^prod_devices.csv$"; then
            echo "devices_file_changed=true" >> $GITHUB_ENV
          else
            echo "devices_file_changed=false" >> $GITHUB_ENV
          fi

      - name: Check if versions or devices file have changed
        run: |
          # Load values from environment
          source $GITHUB_ENV
          # Check if either FIRMWARE_VERSION or VERSION has changed
          if [[ "$main_firmware_version" == "$develop_firmware_version" ]] && [[ "$main_version" == "$develop_version" ]]; then
            VERSION_CHANGED=false
          else
            VERSION_CHANGED=true
          fi

          # Check if all conditions for merging are met
          if [[ "$VERSION_CHANGED" == "true" ]] && [[ "$devices_file_changed" == "true" ]]; then
            echo "Success: Either FIRMWARE_VERSION or VERSION has changed, and prod_devices.csv has been modified."
          else
            echo "Error: Either FIRMWARE_VERSION or VERSION must change, and prod_devices.csv must also be modified."
            exit 1
          fi
