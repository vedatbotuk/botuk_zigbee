name: PROD - ESP32-H2 Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-main:
    runs-on: ubuntu-latest

    env:
      IDF_TOOLS_PATH: ${{ github.workspace }}/tools

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up environment
      - name: Set up environment
        run: |
          echo "Setting up environment..."
          chmod +x ./scripts/setup_env.sh
          ./scripts/setup_env.sh

      # Step 3: Make prod script executable and run it
      - name: Make prod script executable
        run: chmod +x ./scripts/prod.sh

      - name: Run the production script
        run: ./scripts/prod.sh

      # Step 4: Upload binaries as artifacts
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: prod_ota_files
          path: ota/**  # Upload all files in the ota directory

      # Step 5: Determine the new version tag
      - name: Set up version tag
        id: version_tag
        run: |
          # Create a tag based on the date, e.g., v2023.10.20
          DATE_TAG=$(date +'%Y.%m.%d')
          TAG="v${DATE_TAG}"
          echo "New tag: $TAG"
          echo "::set-output name=TAG::$TAG"

      # Step 6: Create a new tag and push it
      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version_tag.outputs.TAG }}
          git push origin ${{ steps.version_tag.outputs.TAG }}

      # Step 7: Create a GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_tag.outputs.TAG }}
          release_name: "Release ${{ steps.version_tag.outputs.TAG }}"
          body: "Automated release for changes merged into main."
          draft: false
          prerelease: false

      # Step 8: Upload artifacts to the release
      - name: Upload Binaries to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ota/**  # Upload all files in the ota directory as assets
          asset_name: prod_ota_files.zip
          asset_content_type: application/zip
