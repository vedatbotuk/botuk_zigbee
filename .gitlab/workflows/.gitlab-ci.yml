stages:
  - validate
  - build
  - prod
  - prepare
  - deploy
  - cleanup

# Pull request can be have some todos
# Check before merging, if all todos is done
############################################
check_pr_description:
  stage: validate
  image: registry.gitlab.botuk.de/vedat/botuk_zigbee
  when: always # Ensure this job is never skipped
  only:
    - merge_requests
  script:
    # Fetch the PR description from the GitLab API
    - API_URL="$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID"
    - 'echo "Fetching PR description from: $API_URL"'

    # Fetch the PR details using curl
    - >
      API_RESPONSE=$(curl
      --silent
      --header
      "JOB-TOKEN:${CI_JOB_TOKEN}"
      "$API_URL")
    
    # - echo $API_RESPONSE

    # Extract the description field
    - MR_DESCRIPTION=$(echo "$API_RESPONSE" | jq -r '.description')
    - 'echo "PR Description: $MR_DESCRIPTION"'

    # Check if there are any unchecked to-do items in the description
    - >
      if echo "$MR_DESCRIPTION" | grep -q '\- \[ \]';
      then
      echo "Error: Found unchecked to-do items in PR description.";
      exit 1;
      else
      echo "No unchecked to-do items found in PR description.";
      fi

# Use Catalog workflows #
# #######################
include:
  - component: $CI_SERVER_FQDN/vedat/gitlab-ci-templates/sync-to-wikijs@~latest
    inputs:
      page_path: "technical/project/botuk_zigbee"
      page_title: "botuk_zigbee"
      filename: "README.md"
  - component: $CI_SERVER_FQDN/vedat/gitlab-ci-templates/check_version@~latest
    inputs:
      versionfile: "settings.conf"
      versionkey: "FIRMWARE_VERSION"
  - component: $CI_SERVER_FQDN/vedat/gitlab-ci-templates/restrict_pr_to_main@~latest

sync_wiki:
  extends: .sync_to_wikijs

check_version:
  extends: .check_version
restrict_pr_to_main:
  extends: .restrict_pr_to_main

# TODO build docker
# esp-idf container can build and push
# This is necassary if we change the esp-idf version.

# Building dev before merge to dev branch
# This comes from features branch
# ########################################
build_dev:
  stage: build
  image: registry.gitlab.botuk.de/vedat/botuk_zigbee
  rules:
  - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
    when: always
  script:
    - echo "Repository already checked out by GitLab Runner."
    - source $HOME/esp/esp-idf/export.sh
    - idf.py set-target esp32h2
    - idf.py build

# Building prod before merging to main branch
# ###########################################
build_prod:
  stage: prod
  image: registry.gitlab.botuk.de/vedat/botuk_zigbee
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: always
  script:
    - echo "Repository checked out by GitLab Runner"
    - source $HOME/esp/esp-idf/export.sh
    - chmod +x ./scripts/prod.sh
    - ./scripts/prod.sh
  artifacts:
    paths:
      - ./ota/*
    expire_in: 1 hour

.deploy_rule: &deploy_rule
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

# Deploying after merging to main branch
# ######################################
prepare_job:
  stage: prepare
  image: registry.gitlab.botuk.de/vedat/botuk_zigbee
  rules: *deploy_rule
  script:
    # Load settings from settings.conf
    - echo "Loading FIRMWARE_VERSION and VERSION from settings.conf"
    - source settings.conf
    - export FIRMWARE_VERSION
    - export VERSION
    - echo "FIRMWARE_VERSION=$FIRMWARE_VERSION" >> variables.env
    - echo "VERSION=$VERSION"  >> variables.env

    # Set up version tag based on firmware version and version
    - echo "TAG=${FIRMWARE_VERSION}_${VERSION}" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env

deploy:
  stage: deploy
  image: registry.gitlab.botuk.de/vedat/botuk_zigbee
  needs:
    - job: prepare_job
      artifacts: true
  rules: *deploy_rule
  script:
    # Load settings from settings.conf and set up version tag
    - echo "Loading FIRMWARE_VERSION and VERSION from settings.conf"
    - source settings.conf
    - export FIRMWARE_VERSION
    - export VERSION
    - NEW_TAG=${FIRMWARE_VERSION}_${VERSION}

    # Run the prod script
    - chmod +x ./scripts/prod.sh
    - ./scripts/prod.sh
    # DEBUG LINES
    # - mkdir ota
    # - touch ota/botuk_index1.json
    # - touch ota/botuk_index2.json
    # - touch ota/botuk_index3.json
    # - pwd
    # - ls /builds/vedat/botuk_zigbee
    # - ls /builds/vedat/botuk_zigbee/ota
    # - ls ota

    # Create and push tag
    - git config user.name "gitlab-ci-bot"
    - git config user.email "gitlab-ci-bot@gitlab.botuk.de"

    # Generate Release Notes from Commits Since Last Tag
    # Check for existing tags
    - LATEST_TAG=$(git describe --tags --abbrev=0 || echo "")
    - COMMITS=$(git log "$LATEST_TAG"..HEAD --pretty=format:"%H|%s")
    - RELEASE_NOTES="Release Notes"
    - >
      if [[ -z "$COMMITS" ]];
      then
      RELEASE_NOTES="No new changes since last tag.";
      else
      IFS=$'\n';
      for COMMIT in $COMMITS;
      do
      COMMIT_HASH=$(echo "$COMMIT" | cut -d '|' -f 1);
      COMMIT_MESSAGE=$(echo "$COMMIT" | cut -d '|' -f 2);
      RELEASE_NOTES="${RELEASE_NOTES}\n- Commit: ${COMMIT_HASH}\n  Message: ${COMMIT_MESSAGE}";
      done
      fi

    # Save release notes to file
    - echo -e "$RELEASE_NOTES" > release_notes.txt
    - cat release_notes.txt

    # Check if the tag already exists locally and delete it to prevent conflicts
    - >
      if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
        echo "Tag $NEW_TAG already exists locally, deleting it first."
        git tag -d "$NEW_TAG"
      fi

    # Update the remote URL to use the token
    - git tag $NEW_TAG
    - git push https://${CI_PROJECT_NAME}:${RELEASE_TOKEN}@gitlab.botuk.de/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME.git $NEW_TAG

    # Generate dynamic assets list for all files in the ota directory
    - echo "Generating release assets..."
    - PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$NEW_TAG/1.0.0"
    - >
      cd ota; assets="["; for file in *; do if [[ -f "$file" ]]; then file_name=$(basename "$file");
      assets="$assets
      {\"name\": \"$file_name\",
      \"url\": \"${PACKAGE_REGISTRY_URL}/$file\",
      \"link_type\":\"other\"
      },";
      echo "${PACKAGE_REGISTRY_URL}/$file";
      ls -l;
      curl --header "JOB-TOKEN:${CI_JOB_TOKEN}" --upload-file $file "${PACKAGE_REGISTRY_URL}/$file";
      fi;
      done;
      assets="${assets%,}]"

    # DEBUG LINES
    # - echo "$assets"

    # Create the release
    - >
      release-cli create --description "$(echo -e "$RELEASE_NOTES")"
      --tag-name "$NEW_TAG"
      --ref "$CI_COMMIT_SHA"
      --assets-link "$assets"
  artifacts:
    paths:
      - ota/*
    expire_in: 1 hour

# CLEANUP
# #######
cleanup: &cleanup
  stage: cleanup
  image: registry.gitlab.botuk.de/vedat/botuk_zigbee
  script:
    - rm -rf ./*
  only:
    - merge_requests
